/*
Package otgyang is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was true
in this case).

This package was generated by /usr/local/google/home/robjs/go/pkg/mod/github.com/openconfig/ygot@v0.24.2/genutil/names.go
using the following YANG input files:
  - models-yang/models/interface/open-traffic-generator-port.yang
  - models-yang/models/flow/open-traffic-generator-flow.yang
  - models-yang/models/discovery/open-traffic-generator-discovery-interfaces.yang
  - models-yang/models/discovery/open-traffic-generator-discovery.yang

Imported modules were sourced from:
  - models-yang/...
*/
package otgyang

import (
	"encoding/json"
	"fmt"
	"reflect"

	"github.com/openconfig/goyang/pkg/yang"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// Binary is a type that is used for fields that have a YANG type of
// binary. It is used such that binary fields can be distinguished from
// leaf-lists of uint8s (which are mapped to []uint8, equivalent to
// []byte in reflection).
type Binary []byte

// YANGEmpty is a type that is used for fields that have a YANG type of
// empty. It is used such that empty fields can be distinguished from boolean fields
// in the generated code.
type YANGEmpty bool

// UnionInt8 is an int8 type assignable to unions of which it is a subtype.
type UnionInt8 int8

// UnionInt16 is an int16 type assignable to unions of which it is a subtype.
type UnionInt16 int16

// UnionInt32 is an int32 type assignable to unions of which it is a subtype.
type UnionInt32 int32

// UnionInt64 is an int64 type assignable to unions of which it is a subtype.
type UnionInt64 int64

// UnionUint8 is a uint8 type assignable to unions of which it is a subtype.
type UnionUint8 uint8

// UnionUint16 is a uint16 type assignable to unions of which it is a subtype.
type UnionUint16 uint16

// UnionUint32 is a uint32 type assignable to unions of which it is a subtype.
type UnionUint32 uint32

// UnionUint64 is a uint64 type assignable to unions of which it is a subtype.
type UnionUint64 uint64

// UnionFloat64 is a float64 type assignable to unions of which it is a subtype.
type UnionFloat64 float64

// UnionString is a string type assignable to unions of which it is a subtype.
type UnionString string

// UnionBool is a bool type assignable to unions of which it is a subtype.
type UnionBool bool

// UnionUnsupported is an interface{} wrapper type for unsupported types. It is
// assignable to unions of which it is a subtype.
type UnionUnsupported struct {
	Value interface{}
}

var (
	SchemaTree map[string]*yang.Entry
	ΛEnumTypes map[string][]reflect.Type
)

func init() {
	var err error
	initΛEnumTypes()
	if SchemaTree, err = UnzipSchema(); err != nil {
		panic("schema error: " + err.Error())
	}
}

// Schema returns the details of the generated schema.
func Schema() (*ytypes.Schema, error) {
	uzp, err := UnzipSchema()
	if err != nil {
		return nil, fmt.Errorf("cannot unzip schema, %v", err)
	}

	return &ytypes.Schema{
		Root:       &Device{},
		SchemaTree: uzp,
		Unmarshal:  Unmarshal,
	}, nil
}

// UnzipSchema unzips the zipped schema and returns a map of yang.Entry nodes,
// keyed by the name of the struct that the yang.Entry describes the schema for.
func UnzipSchema() (map[string]*yang.Entry, error) {
	var schemaTree map[string]*yang.Entry
	var err error
	if schemaTree, err = ygot.GzipToSchema(ySchema); err != nil {
		return nil, fmt.Errorf("could not unzip the schema; %v", err)
	}
	return schemaTree, nil
}

// Unmarshal unmarshals data, which must be RFC7951 JSON format, into
// destStruct, which must be non-nil and the correct GoStruct type. It returns
// an error if the destStruct is not found in the schema or the data cannot be
// unmarshaled. The supplied options (opts) are used to control the behaviour
// of the unmarshal function - for example, determining whether errors are
// thrown for unknown fields in the input JSON.
func Unmarshal(data []byte, destStruct ygot.GoStruct, opts ...ytypes.UnmarshalOpt) error {
	tn := reflect.TypeOf(destStruct).Elem().Name()
	schema, ok := SchemaTree[tn]
	if !ok {
		return fmt.Errorf("could not find schema for type %s", tn)
	}
	var jsonTree interface{}
	if err := json.Unmarshal([]byte(data), &jsonTree); err != nil {
		return err
	}
	return ytypes.Unmarshal(schema, destStruct, jsonTree, opts...)
}

// Device represents the /device YANG schema element.
type Device struct {
	ΛMetadata  []ygot.Annotation     `path:"@" ygotAnnotation:"true"`
	Flow       map[string]*Flow      `path:"flows/flow" module:"open-traffic-generator-flow/open-traffic-generator-flow"`
	ΛFlow      []ygot.Annotation     `path:"flows/@flow" ygotAnnotation:"true"`
	Interface  map[string]*Interface `path:"interfaces/interface" module:"open-traffic-generator-discovery/open-traffic-generator-discovery"`
	ΛInterface []ygot.Annotation     `path:"interfaces/@interface" ygotAnnotation:"true"`
	Port       map[string]*Port      `path:"ports/port" module:"open-traffic-generator-port/open-traffic-generator-port"`
	ΛPort      []ygot.Annotation     `path:"ports/@port" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Device implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Device) IsYANGGoStruct() {}

// NewFlow creates a new entry in the Flow list of the
// Device struct. The keys of the list are populated from the input
// arguments.
func (t *Device) NewFlow(Name string) (*Flow, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Flow == nil {
		t.Flow = make(map[string]*Flow)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Flow[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Flow", key)
	}

	t.Flow[key] = &Flow{
		Name: &Name,
	}

	return t.Flow[key], nil
}

// RenameFlow renames an entry in the list Flow within
// the Device struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Device) RenameFlow(oldK, newK string) error {
	if _, ok := t.Flow[newK]; ok {
		return fmt.Errorf("key %v already exists in Flow", newK)
	}

	e, ok := t.Flow[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Flow", oldK)
	}
	e.Name = &newK

	t.Flow[newK] = e
	delete(t.Flow, oldK)
	return nil
}

// GetOrCreateFlow retrieves the value with the specified keys from
// the receiver Device. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Device) GetOrCreateFlow(Name string) *Flow {

	key := Name

	if v, ok := t.Flow[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewFlow(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateFlow got unexpected error: %v", err))
	}
	return v
}

// GetFlow retrieves the value with the specified key from
// the Flow map field of Device. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Device) GetFlow(Name string) *Flow {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Flow[key]; ok {
		return lm
	}
	return nil
}

// AppendFlow appends the supplied Flow struct to the
// list Flow of Device. If the key value(s) specified in
// the supplied Flow already exist in the list, an error is
// returned.
func (t *Device) AppendFlow(v *Flow) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Flow == nil {
		t.Flow = make(map[string]*Flow)
	}

	if _, ok := t.Flow[key]; ok {
		return fmt.Errorf("duplicate key for list Flow %v", key)
	}

	t.Flow[key] = v
	return nil
}

// NewInterface creates a new entry in the Interface list of the
// Device struct. The keys of the list are populated from the input
// arguments.
func (t *Device) NewInterface(Name string) (*Interface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*Interface)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &Interface{
		Name: &Name,
	}

	return t.Interface[key], nil
}

// RenameInterface renames an entry in the list Interface within
// the Device struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Device) RenameInterface(oldK, newK string) error {
	if _, ok := t.Interface[newK]; ok {
		return fmt.Errorf("key %v already exists in Interface", newK)
	}

	e, ok := t.Interface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Interface", oldK)
	}
	e.Name = &newK

	t.Interface[newK] = e
	delete(t.Interface, oldK)
	return nil
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver Device. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Device) GetOrCreateInterface(Name string) *Interface {

	key := Name

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of Device. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Device) GetInterface(Name string) *Interface {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// AppendInterface appends the supplied Interface struct to the
// list Interface of Device. If the key value(s) specified in
// the supplied Interface already exist in the list, an error is
// returned.
func (t *Device) AppendInterface(v *Interface) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// NewPort creates a new entry in the Port list of the
// Device struct. The keys of the list are populated from the input
// arguments.
func (t *Device) NewPort(Name string) (*Port, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Port == nil {
		t.Port = make(map[string]*Port)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Port[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Port", key)
	}

	t.Port[key] = &Port{
		Name: &Name,
	}

	return t.Port[key], nil
}

// RenamePort renames an entry in the list Port within
// the Device struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Device) RenamePort(oldK, newK string) error {
	if _, ok := t.Port[newK]; ok {
		return fmt.Errorf("key %v already exists in Port", newK)
	}

	e, ok := t.Port[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Port", oldK)
	}
	e.Name = &newK

	t.Port[newK] = e
	delete(t.Port, oldK)
	return nil
}

// GetOrCreatePort retrieves the value with the specified keys from
// the receiver Device. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Device) GetOrCreatePort(Name string) *Port {

	key := Name

	if v, ok := t.Port[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPort(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePort got unexpected error: %v", err))
	}
	return v
}

// GetPort retrieves the value with the specified key from
// the Port map field of Device. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Device) GetPort(Name string) *Port {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Port[key]; ok {
		return lm
	}
	return nil
}

// AppendPort appends the supplied Port struct to the
// list Port of Device. If the key value(s) specified in
// the supplied Port already exist in the list, an error is
// returned.
func (t *Device) AppendPort(v *Port) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Port == nil {
		t.Port = make(map[string]*Port)
	}

	if _, ok := t.Port[key]; ok {
		return fmt.Errorf("duplicate key for list Port %v", key)
	}

	t.Port[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the Device
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Device) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Flow {
		e.PopulateDefaults()
	}
	for _, e := range t.Interface {
		e.PopulateDefaults()
	}
	for _, e := range t.Port {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Device) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Device"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Device) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Device) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Device.
func (*Device) ΛBelongingModule() string {
	return ""
}

// Flow represents the /open-traffic-generator-flow/flows/flow YANG schema element.
type Flow struct {
	ΛMetadata     []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Counters      *Flow_Counters    `path:"state/counters" module:"open-traffic-generator-flow/open-traffic-generator-flow"`
	ΛCounters     []ygot.Annotation `path:"state/@counters" ygotAnnotation:"true"`
	InFrameRate   Binary            `path:"state/in-frame-rate" module:"open-traffic-generator-flow/open-traffic-generator-flow"`
	ΛInFrameRate  []ygot.Annotation `path:"state/@in-frame-rate" ygotAnnotation:"true"`
	InRate        Binary            `path:"state/in-rate" module:"open-traffic-generator-flow/open-traffic-generator-flow"`
	ΛInRate       []ygot.Annotation `path:"state/@in-rate" ygotAnnotation:"true"`
	LossPct       Binary            `path:"state/loss-pct" module:"open-traffic-generator-flow/open-traffic-generator-flow"`
	ΛLossPct      []ygot.Annotation `path:"state/@loss-pct" ygotAnnotation:"true"`
	Name          *string           `path:"state/name|name" module:"open-traffic-generator-flow/open-traffic-generator-flow|open-traffic-generator-flow"`
	ΛName         []ygot.Annotation `path:"state/@name|@name" ygotAnnotation:"true"`
	OutFrameRate  Binary            `path:"state/out-frame-rate" module:"open-traffic-generator-flow/open-traffic-generator-flow"`
	ΛOutFrameRate []ygot.Annotation `path:"state/@out-frame-rate" ygotAnnotation:"true"`
	OutRate       Binary            `path:"state/out-rate" module:"open-traffic-generator-flow/open-traffic-generator-flow"`
	ΛOutRate      []ygot.Annotation `path:"state/@out-rate" ygotAnnotation:"true"`
	Transmit      *bool             `path:"state/transmit" module:"open-traffic-generator-flow/open-traffic-generator-flow"`
	ΛTransmit     []ygot.Annotation `path:"state/@transmit" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Flow implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Flow) IsYANGGoStruct() {}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *Flow) GetOrCreateCounters() *Flow_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &Flow_Counters{}
	return t.Counters
}

// GetCounters returns the value of the Counters struct pointer
// from Flow. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Flow) GetCounters() *Flow_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// GetInFrameRate retrieves the value of the leaf InFrameRate from the Flow
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InFrameRate is set, it can
// safely use t.GetInFrameRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InFrameRate == nil' before retrieving the leaf's value.
func (t *Flow) GetInFrameRate() Binary {
	if t == nil || t.InFrameRate == nil {
		return nil
	}
	return t.InFrameRate
}

// GetInRate retrieves the value of the leaf InRate from the Flow
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InRate is set, it can
// safely use t.GetInRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InRate == nil' before retrieving the leaf's value.
func (t *Flow) GetInRate() Binary {
	if t == nil || t.InRate == nil {
		return nil
	}
	return t.InRate
}

// GetLossPct retrieves the value of the leaf LossPct from the Flow
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LossPct is set, it can
// safely use t.GetLossPct() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LossPct == nil' before retrieving the leaf's value.
func (t *Flow) GetLossPct() Binary {
	if t == nil || t.LossPct == nil {
		return nil
	}
	return t.LossPct
}

// GetName retrieves the value of the leaf Name from the Flow
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *Flow) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetOutFrameRate retrieves the value of the leaf OutFrameRate from the Flow
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutFrameRate is set, it can
// safely use t.GetOutFrameRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutFrameRate == nil' before retrieving the leaf's value.
func (t *Flow) GetOutFrameRate() Binary {
	if t == nil || t.OutFrameRate == nil {
		return nil
	}
	return t.OutFrameRate
}

// GetOutRate retrieves the value of the leaf OutRate from the Flow
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutRate is set, it can
// safely use t.GetOutRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutRate == nil' before retrieving the leaf's value.
func (t *Flow) GetOutRate() Binary {
	if t == nil || t.OutRate == nil {
		return nil
	}
	return t.OutRate
}

// GetTransmit retrieves the value of the leaf Transmit from the Flow
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Transmit is set, it can
// safely use t.GetTransmit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Transmit == nil' before retrieving the leaf's value.
func (t *Flow) GetTransmit() bool {
	if t == nil || t.Transmit == nil {
		return false
	}
	return *t.Transmit
}

// PopulateDefaults recursively populates unset leaf fields in the Flow
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Flow) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Counters.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the Flow struct, which is a YANG list entry.
func (t *Flow) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Flow) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Flow"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Flow) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Flow) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Flow.
func (*Flow) ΛBelongingModule() string {
	return "open-traffic-generator-flow"
}

// Flow_Counters represents the /open-traffic-generator-flow/flows/flow/state/counters YANG schema element.
type Flow_Counters struct {
	ΛMetadata  []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	InOctets   *uint64           `path:"in-octets" module:"open-traffic-generator-flow"`
	ΛInOctets  []ygot.Annotation `path:"@in-octets" ygotAnnotation:"true"`
	InPkts     *uint64           `path:"in-pkts" module:"open-traffic-generator-flow"`
	ΛInPkts    []ygot.Annotation `path:"@in-pkts" ygotAnnotation:"true"`
	OutOctets  *uint64           `path:"out-octets" module:"open-traffic-generator-flow"`
	ΛOutOctets []ygot.Annotation `path:"@out-octets" ygotAnnotation:"true"`
	OutPkts    *uint64           `path:"out-pkts" module:"open-traffic-generator-flow"`
	ΛOutPkts   []ygot.Annotation `path:"@out-pkts" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Flow_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Flow_Counters) IsYANGGoStruct() {}

// GetInOctets retrieves the value of the leaf InOctets from the Flow_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InOctets is set, it can
// safely use t.GetInOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InOctets == nil' before retrieving the leaf's value.
func (t *Flow_Counters) GetInOctets() uint64 {
	if t == nil || t.InOctets == nil {
		return 0
	}
	return *t.InOctets
}

// GetInPkts retrieves the value of the leaf InPkts from the Flow_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InPkts is set, it can
// safely use t.GetInPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InPkts == nil' before retrieving the leaf's value.
func (t *Flow_Counters) GetInPkts() uint64 {
	if t == nil || t.InPkts == nil {
		return 0
	}
	return *t.InPkts
}

// GetOutOctets retrieves the value of the leaf OutOctets from the Flow_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutOctets is set, it can
// safely use t.GetOutOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutOctets == nil' before retrieving the leaf's value.
func (t *Flow_Counters) GetOutOctets() uint64 {
	if t == nil || t.OutOctets == nil {
		return 0
	}
	return *t.OutOctets
}

// GetOutPkts retrieves the value of the leaf OutPkts from the Flow_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutPkts is set, it can
// safely use t.GetOutPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutPkts == nil' before retrieving the leaf's value.
func (t *Flow_Counters) GetOutPkts() uint64 {
	if t == nil || t.OutPkts == nil {
		return 0
	}
	return *t.OutPkts
}

// PopulateDefaults recursively populates unset leaf fields in the Flow_Counters
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Flow_Counters) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Flow_Counters) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Flow_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Flow_Counters) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Flow_Counters) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Flow_Counters.
func (*Flow_Counters) ΛBelongingModule() string {
	return "open-traffic-generator-flow"
}

// Interface represents the /open-traffic-generator-discovery/interfaces/interface YANG schema element.
type Interface struct {
	ΛMetadata     []ygot.Annotation                  `path:"@" ygotAnnotation:"true"`
	Ipv4Neighbor  map[string]*Interface_Ipv4Neighbor `path:"ipv4-neighbors/ipv4-neighbor" module:"open-traffic-generator-discovery/open-traffic-generator-discovery"`
	ΛIpv4Neighbor []ygot.Annotation                  `path:"ipv4-neighbors/@ipv4-neighbor" ygotAnnotation:"true"`
	Ipv6Neighbor  map[string]*Interface_Ipv6Neighbor `path:"ipv6-neighbors/ipv6-neighbor" module:"open-traffic-generator-discovery/open-traffic-generator-discovery"`
	ΛIpv6Neighbor []ygot.Annotation                  `path:"ipv6-neighbors/@ipv6-neighbor" ygotAnnotation:"true"`
	Name          *string                            `path:"state/name|name" module:"open-traffic-generator-discovery/open-traffic-generator-discovery|open-traffic-generator-discovery"`
	ΛName         []ygot.Annotation                  `path:"state/@name|@name" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface) IsYANGGoStruct() {}

// NewIpv4Neighbor creates a new entry in the Ipv4Neighbor list of the
// Interface struct. The keys of the list are populated from the input
// arguments.
func (t *Interface) NewIpv4Neighbor(Ipv4Address string) (*Interface_Ipv4Neighbor, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ipv4Neighbor == nil {
		t.Ipv4Neighbor = make(map[string]*Interface_Ipv4Neighbor)
	}

	key := Ipv4Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Ipv4Neighbor[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Ipv4Neighbor", key)
	}

	t.Ipv4Neighbor[key] = &Interface_Ipv4Neighbor{
		Ipv4Address: &Ipv4Address,
	}

	return t.Ipv4Neighbor[key], nil
}

// RenameIpv4Neighbor renames an entry in the list Ipv4Neighbor within
// the Interface struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Interface) RenameIpv4Neighbor(oldK, newK string) error {
	if _, ok := t.Ipv4Neighbor[newK]; ok {
		return fmt.Errorf("key %v already exists in Ipv4Neighbor", newK)
	}

	e, ok := t.Ipv4Neighbor[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Ipv4Neighbor", oldK)
	}
	e.Ipv4Address = &newK

	t.Ipv4Neighbor[newK] = e
	delete(t.Ipv4Neighbor, oldK)
	return nil
}

// GetOrCreateIpv4Neighbor retrieves the value with the specified keys from
// the receiver Interface. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Interface) GetOrCreateIpv4Neighbor(Ipv4Address string) *Interface_Ipv4Neighbor {

	key := Ipv4Address

	if v, ok := t.Ipv4Neighbor[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewIpv4Neighbor(Ipv4Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateIpv4Neighbor got unexpected error: %v", err))
	}
	return v
}

// GetIpv4Neighbor retrieves the value with the specified key from
// the Ipv4Neighbor map field of Interface. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Interface) GetIpv4Neighbor(Ipv4Address string) *Interface_Ipv4Neighbor {

	if t == nil {
		return nil
	}

	key := Ipv4Address

	if lm, ok := t.Ipv4Neighbor[key]; ok {
		return lm
	}
	return nil
}

// AppendIpv4Neighbor appends the supplied Interface_Ipv4Neighbor struct to the
// list Ipv4Neighbor of Interface. If the key value(s) specified in
// the supplied Interface_Ipv4Neighbor already exist in the list, an error is
// returned.
func (t *Interface) AppendIpv4Neighbor(v *Interface_Ipv4Neighbor) error {
	if v.Ipv4Address == nil {
		return fmt.Errorf("invalid nil key received for Ipv4Address")
	}

	key := *v.Ipv4Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ipv4Neighbor == nil {
		t.Ipv4Neighbor = make(map[string]*Interface_Ipv4Neighbor)
	}

	if _, ok := t.Ipv4Neighbor[key]; ok {
		return fmt.Errorf("duplicate key for list Ipv4Neighbor %v", key)
	}

	t.Ipv4Neighbor[key] = v
	return nil
}

// NewIpv6Neighbor creates a new entry in the Ipv6Neighbor list of the
// Interface struct. The keys of the list are populated from the input
// arguments.
func (t *Interface) NewIpv6Neighbor(Ipv6Address string) (*Interface_Ipv6Neighbor, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ipv6Neighbor == nil {
		t.Ipv6Neighbor = make(map[string]*Interface_Ipv6Neighbor)
	}

	key := Ipv6Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Ipv6Neighbor[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Ipv6Neighbor", key)
	}

	t.Ipv6Neighbor[key] = &Interface_Ipv6Neighbor{
		Ipv6Address: &Ipv6Address,
	}

	return t.Ipv6Neighbor[key], nil
}

// RenameIpv6Neighbor renames an entry in the list Ipv6Neighbor within
// the Interface struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Interface) RenameIpv6Neighbor(oldK, newK string) error {
	if _, ok := t.Ipv6Neighbor[newK]; ok {
		return fmt.Errorf("key %v already exists in Ipv6Neighbor", newK)
	}

	e, ok := t.Ipv6Neighbor[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Ipv6Neighbor", oldK)
	}
	e.Ipv6Address = &newK

	t.Ipv6Neighbor[newK] = e
	delete(t.Ipv6Neighbor, oldK)
	return nil
}

// GetOrCreateIpv6Neighbor retrieves the value with the specified keys from
// the receiver Interface. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Interface) GetOrCreateIpv6Neighbor(Ipv6Address string) *Interface_Ipv6Neighbor {

	key := Ipv6Address

	if v, ok := t.Ipv6Neighbor[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewIpv6Neighbor(Ipv6Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateIpv6Neighbor got unexpected error: %v", err))
	}
	return v
}

// GetIpv6Neighbor retrieves the value with the specified key from
// the Ipv6Neighbor map field of Interface. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Interface) GetIpv6Neighbor(Ipv6Address string) *Interface_Ipv6Neighbor {

	if t == nil {
		return nil
	}

	key := Ipv6Address

	if lm, ok := t.Ipv6Neighbor[key]; ok {
		return lm
	}
	return nil
}

// AppendIpv6Neighbor appends the supplied Interface_Ipv6Neighbor struct to the
// list Ipv6Neighbor of Interface. If the key value(s) specified in
// the supplied Interface_Ipv6Neighbor already exist in the list, an error is
// returned.
func (t *Interface) AppendIpv6Neighbor(v *Interface_Ipv6Neighbor) error {
	if v.Ipv6Address == nil {
		return fmt.Errorf("invalid nil key received for Ipv6Address")
	}

	key := *v.Ipv6Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ipv6Neighbor == nil {
		t.Ipv6Neighbor = make(map[string]*Interface_Ipv6Neighbor)
	}

	if _, ok := t.Ipv6Neighbor[key]; ok {
		return fmt.Errorf("duplicate key for list Ipv6Neighbor %v", key)
	}

	t.Ipv6Neighbor[key] = v
	return nil
}

// GetName retrieves the value of the leaf Name from the Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *Interface) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the Interface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Interface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Ipv4Neighbor {
		e.PopulateDefaults()
	}
	for _, e := range t.Ipv6Neighbor {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the Interface struct, which is a YANG list entry.
func (t *Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Interface.
func (*Interface) ΛBelongingModule() string {
	return "open-traffic-generator-discovery"
}

// Interface_Ipv4Neighbor represents the /open-traffic-generator-discovery/interfaces/interface/ipv4-neighbors/ipv4-neighbor YANG schema element.
type Interface_Ipv4Neighbor struct {
	ΛMetadata         []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Ipv4Address       *string           `path:"state/ipv4-address|ipv4-address" module:"open-traffic-generator-discovery/open-traffic-generator-discovery|open-traffic-generator-discovery"`
	ΛIpv4Address      []ygot.Annotation `path:"state/@ipv4-address|@ipv4-address" ygotAnnotation:"true"`
	LinkLayerAddress  *string           `path:"state/link-layer-address" module:"open-traffic-generator-discovery/open-traffic-generator-discovery"`
	ΛLinkLayerAddress []ygot.Annotation `path:"state/@link-layer-address" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Interface_Ipv4Neighbor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Ipv4Neighbor) IsYANGGoStruct() {}

// GetIpv4Address retrieves the value of the leaf Ipv4Address from the Interface_Ipv4Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4Address is set, it can
// safely use t.GetIpv4Address() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4Address == nil' before retrieving the leaf's value.
func (t *Interface_Ipv4Neighbor) GetIpv4Address() string {
	if t == nil || t.Ipv4Address == nil {
		return ""
	}
	return *t.Ipv4Address
}

// GetLinkLayerAddress retrieves the value of the leaf LinkLayerAddress from the Interface_Ipv4Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LinkLayerAddress is set, it can
// safely use t.GetLinkLayerAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LinkLayerAddress == nil' before retrieving the leaf's value.
func (t *Interface_Ipv4Neighbor) GetLinkLayerAddress() string {
	if t == nil || t.LinkLayerAddress == nil {
		return ""
	}
	return *t.LinkLayerAddress
}

// PopulateDefaults recursively populates unset leaf fields in the Interface_Ipv4Neighbor
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Interface_Ipv4Neighbor) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the Interface_Ipv4Neighbor struct, which is a YANG list entry.
func (t *Interface_Ipv4Neighbor) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Ipv4Address == nil {
		return nil, fmt.Errorf("nil value for key Ipv4Address")
	}

	return map[string]interface{}{
		"ipv4-address": *t.Ipv4Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Ipv4Neighbor) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Ipv4Neighbor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Ipv4Neighbor) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Ipv4Neighbor) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Interface_Ipv4Neighbor.
func (*Interface_Ipv4Neighbor) ΛBelongingModule() string {
	return "open-traffic-generator-discovery"
}

// Interface_Ipv6Neighbor represents the /open-traffic-generator-discovery/interfaces/interface/ipv6-neighbors/ipv6-neighbor YANG schema element.
type Interface_Ipv6Neighbor struct {
	ΛMetadata         []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Ipv6Address       *string           `path:"state/ipv6-address|ipv6-address" module:"open-traffic-generator-discovery/open-traffic-generator-discovery|open-traffic-generator-discovery"`
	ΛIpv6Address      []ygot.Annotation `path:"state/@ipv6-address|@ipv6-address" ygotAnnotation:"true"`
	LinkLayerAddress  *string           `path:"state/link-layer-address" module:"open-traffic-generator-discovery/open-traffic-generator-discovery"`
	ΛLinkLayerAddress []ygot.Annotation `path:"state/@link-layer-address" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Interface_Ipv6Neighbor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Ipv6Neighbor) IsYANGGoStruct() {}

// GetIpv6Address retrieves the value of the leaf Ipv6Address from the Interface_Ipv6Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6Address is set, it can
// safely use t.GetIpv6Address() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6Address == nil' before retrieving the leaf's value.
func (t *Interface_Ipv6Neighbor) GetIpv6Address() string {
	if t == nil || t.Ipv6Address == nil {
		return ""
	}
	return *t.Ipv6Address
}

// GetLinkLayerAddress retrieves the value of the leaf LinkLayerAddress from the Interface_Ipv6Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LinkLayerAddress is set, it can
// safely use t.GetLinkLayerAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LinkLayerAddress == nil' before retrieving the leaf's value.
func (t *Interface_Ipv6Neighbor) GetLinkLayerAddress() string {
	if t == nil || t.LinkLayerAddress == nil {
		return ""
	}
	return *t.LinkLayerAddress
}

// PopulateDefaults recursively populates unset leaf fields in the Interface_Ipv6Neighbor
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Interface_Ipv6Neighbor) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the Interface_Ipv6Neighbor struct, which is a YANG list entry.
func (t *Interface_Ipv6Neighbor) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Ipv6Address == nil {
		return nil, fmt.Errorf("nil value for key Ipv6Address")
	}

	return map[string]interface{}{
		"ipv6-address": *t.Ipv6Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Ipv6Neighbor) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Ipv6Neighbor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Ipv6Neighbor) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Ipv6Neighbor) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Interface_Ipv6Neighbor.
func (*Interface_Ipv6Neighbor) ΛBelongingModule() string {
	return "open-traffic-generator-discovery"
}

// Port represents the /open-traffic-generator-port/ports/port YANG schema element.
type Port struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Counters  *Port_Counters    `path:"state/counters" module:"open-traffic-generator-port/open-traffic-generator-port"`
	ΛCounters []ygot.Annotation `path:"state/@counters" ygotAnnotation:"true"`
	InRate    Binary            `path:"state/in-rate" module:"open-traffic-generator-port/open-traffic-generator-port"`
	ΛInRate   []ygot.Annotation `path:"state/@in-rate" ygotAnnotation:"true"`
	Link      E_Port_Link       `path:"state/link" module:"open-traffic-generator-port/open-traffic-generator-port"`
	ΛLink     []ygot.Annotation `path:"state/@link" ygotAnnotation:"true"`
	Name      *string           `path:"state/name|name" module:"open-traffic-generator-port/open-traffic-generator-port|open-traffic-generator-port"`
	ΛName     []ygot.Annotation `path:"state/@name|@name" ygotAnnotation:"true"`
	OutRate   Binary            `path:"state/out-rate" module:"open-traffic-generator-port/open-traffic-generator-port"`
	ΛOutRate  []ygot.Annotation `path:"state/@out-rate" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Port implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Port) IsYANGGoStruct() {}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *Port) GetOrCreateCounters() *Port_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &Port_Counters{}
	return t.Counters
}

// GetCounters returns the value of the Counters struct pointer
// from Port. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Port) GetCounters() *Port_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// GetInRate retrieves the value of the leaf InRate from the Port
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InRate is set, it can
// safely use t.GetInRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InRate == nil' before retrieving the leaf's value.
func (t *Port) GetInRate() Binary {
	if t == nil || t.InRate == nil {
		return nil
	}
	return t.InRate
}

// GetLink retrieves the value of the leaf Link from the Port
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Link is set, it can
// safely use t.GetLink() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Link == nil' before retrieving the leaf's value.
func (t *Port) GetLink() E_Port_Link {
	if t == nil || t.Link == 0 {
		return 0
	}
	return t.Link
}

// GetName retrieves the value of the leaf Name from the Port
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *Port) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetOutRate retrieves the value of the leaf OutRate from the Port
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutRate is set, it can
// safely use t.GetOutRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutRate == nil' before retrieving the leaf's value.
func (t *Port) GetOutRate() Binary {
	if t == nil || t.OutRate == nil {
		return nil
	}
	return t.OutRate
}

// PopulateDefaults recursively populates unset leaf fields in the Port
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Port) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Counters.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the Port struct, which is a YANG list entry.
func (t *Port) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Port) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Port"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Port) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Port) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Port.
func (*Port) ΛBelongingModule() string {
	return "open-traffic-generator-port"
}

// Port_Counters represents the /open-traffic-generator-port/ports/port/state/counters YANG schema element.
type Port_Counters struct {
	ΛMetadata  []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	InFrames   *uint64           `path:"in-frames" module:"open-traffic-generator-port"`
	ΛInFrames  []ygot.Annotation `path:"@in-frames" ygotAnnotation:"true"`
	InOctets   *uint64           `path:"in-octets" module:"open-traffic-generator-port"`
	ΛInOctets  []ygot.Annotation `path:"@in-octets" ygotAnnotation:"true"`
	OutFrames  *uint64           `path:"out-frames" module:"open-traffic-generator-port"`
	ΛOutFrames []ygot.Annotation `path:"@out-frames" ygotAnnotation:"true"`
	OutOctets  *uint64           `path:"out-octets" module:"open-traffic-generator-port"`
	ΛOutOctets []ygot.Annotation `path:"@out-octets" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Port_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Port_Counters) IsYANGGoStruct() {}

// GetInFrames retrieves the value of the leaf InFrames from the Port_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InFrames is set, it can
// safely use t.GetInFrames() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InFrames == nil' before retrieving the leaf's value.
func (t *Port_Counters) GetInFrames() uint64 {
	if t == nil || t.InFrames == nil {
		return 0
	}
	return *t.InFrames
}

// GetInOctets retrieves the value of the leaf InOctets from the Port_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InOctets is set, it can
// safely use t.GetInOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InOctets == nil' before retrieving the leaf's value.
func (t *Port_Counters) GetInOctets() uint64 {
	if t == nil || t.InOctets == nil {
		return 0
	}
	return *t.InOctets
}

// GetOutFrames retrieves the value of the leaf OutFrames from the Port_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutFrames is set, it can
// safely use t.GetOutFrames() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutFrames == nil' before retrieving the leaf's value.
func (t *Port_Counters) GetOutFrames() uint64 {
	if t == nil || t.OutFrames == nil {
		return 0
	}
	return *t.OutFrames
}

// GetOutOctets retrieves the value of the leaf OutOctets from the Port_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutOctets is set, it can
// safely use t.GetOutOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutOctets == nil' before retrieving the leaf's value.
func (t *Port_Counters) GetOutOctets() uint64 {
	if t == nil || t.OutOctets == nil {
		return 0
	}
	return *t.OutOctets
}

// PopulateDefaults recursively populates unset leaf fields in the Port_Counters
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Port_Counters) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Port_Counters) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Port_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Port_Counters) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Port_Counters) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Port_Counters.
func (*Port_Counters) ΛBelongingModule() string {
	return "open-traffic-generator-port"
}

// E_Port_Link is a derived int64 type which is used to represent
// the enumerated node Port_Link. An additional value named
// Port_Link_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Port_Link int64

// IsYANGGoEnum ensures that Port_Link implements the yang.GoEnum
// interface. This ensures that Port_Link can be identified as a
// mapped type for a YANG enumeration.
func (E_Port_Link) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Port_Link.
func (E_Port_Link) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum }

// String returns a logging-friendly string for E_Port_Link.
func (e E_Port_Link) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Port_Link")
}

const (
	// Port_Link_UNSET corresponds to the value UNSET of Port_Link
	Port_Link_UNSET E_Port_Link = 0
	// Port_Link_UP corresponds to the value UP of Port_Link
	Port_Link_UP E_Port_Link = 1
	// Port_Link_DOWN corresponds to the value DOWN of Port_Link
	Port_Link_DOWN E_Port_Link = 2
)

// ΛEnum is a map, keyed by the name of the type defined for each enum in the
// generated Go code, which provides a mapping between the constant int64 value
// of each value of the enumeration, and the string that is used to represent it
// in the YANG schema. The map is named ΛEnum in order to avoid clash with any
// valid YANG identifier.
var ΛEnum = map[string]map[int64]ygot.EnumDefinition{
	"E_Port_Link": {
		1: {Name: "UP"},
		2: {Name: "DOWN"},
	},
}

var (
	// ySchema is a byte slice contain a gzip compressed representation of the
	// YANG schema from which the Go code was generated. When uncompressed the
	// contents of the byte slice is a JSON document containing an object, keyed
	// on the name of the generated struct, and containing the JSON marshalled
	// contents of a goyang yang.Entry struct, which defines the schema for the
	// fields within the struct.
	ySchema = []byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x5d, 0x5d, 0x73, 0xda, 0x3a,
		0x13, 0xbe, 0xcf, 0xaf, 0x60, 0x7c, 0x95, 0xcc, 0xc4, 0x0d, 0x10, 0x30, 0x09, 0x77, 0x79, 0x93,
		0x66, 0xde, 0x4e, 0xdb, 0x34, 0xd3, 0x8f, 0x73, 0x2e, 0x52, 0xa6, 0xe3, 0x82, 0xa0, 0x9a, 0x18,
		0x89, 0xb1, 0x45, 0xda, 0x4c, 0xe2, 0xff, 0x7e, 0xc6, 0x06, 0x0c, 0xc6, 0x18, 0x4b, 0x2b, 0x01,
		0x86, 0xee, 0xcd, 0x39, 0x8d, 0xd1, 0x87, 0xad, 0xfd, 0x78, 0x56, 0xda, 0xf5, 0xe3, 0x97, 0xa3,
		0x4a, 0xa5, 0x52, 0xb1, 0xee, 0xdc, 0x21, 0xb1, 0xda, 0x15, 0xab, 0x47, 0x9e, 0x68, 0x97, 0x58,
		0xa7, 0x93, 0xab, 0xef, 0x29, 0xeb, 0x59, 0xed, 0x4a, 0x6d, 0xfa, 0xe7, 0x35, 0x67, 0x7d, 0x3a,
		0xb0, 0xda, 0x95, 0xea, 0xf4, 0xc2, 0x0d, 0xf5, 0xad, 0x76, 0x65, 0x32, 0x44, 0x7c, 0xa1, 0xef,
		0xf1, 0xdf, 0x41, 0xea, 0x52, 0x6a, 0xf4, 0xc9, 0xcf, 0xa7, 0xe9, 0x1f, 0xd3, 0x93, 0x24, 0x97,
		0x97, 0x27, 0x4b, 0x7e, 0xb8, 0xf7, 0x49, 0x9f, 0xfe, 0xc9, 0x4c, 0x92, 0x9a, 0x88, 0x8b, 0x81,
		0x1d, 0x4d, 0xb6, 0x34, 0x57, 0xdc, 0xe6, 0x0b, 0x1f, 0xfb, 0x5d, 0xb2, 0xb2, 0xff, 0xe4, 0x7e,
		0xc8, 0xf3, 0x6f, 0xee, 0x47, 0xb7, 0x64, 0x8d, 0x26, 0x53, 0x9d, 0xae, 0x6e, 0xf8, 0x7f, 0x37,
		0xb8, 0xf2, 0x07, 0xe3, 0x21, 0x61, 0xc2, 0x6a, 0x57, 0x84, 0x3f, 0x26, 0x39, 0x0d, 0x17, 0x5a,
		0xcd, 0xef, 0x2c, 0xd3, 0x34, 0x4c, 0x5d, 0x09, 0x97, 0x9e, 0x7a, 0x79, 0xa9, 0x53, 0x4b, 0x9e,
		0xff, 0x30, 0x8b, 0x2b, 0x9f, 0xf7, 0x1c, 0xab, 0x05, 0x90, 0x15, 0x44, 0x3d, 0xa7, 0xc1, 0x1a,
		0x81, 0xa8, 0x08, 0x46, 0x56, 0x40, 0xca, 0x82, 0x52, 0x16, 0x98, 0xa2, 0xe0, 0x56, 0x0b, 0x30,
		0x47, 0x90, 0x85, 0x02, 0x4d, 0x1a, 0xb0, 0xc9, 0x92, 0x15, 0x2c, 0xc2, 0x6c, 0x61, 0xe3, 0xd6,
		0x05, 0x8f, 0x33, 0x15, 0x74, 0xb5, 0xa0, 0x59, 0x9e, 0xe5, 0x41, 0x04, 0x0f, 0x51, 0x00, 0x55,
		0x45, 0x00, 0x2b, 0x04, 0x58, 0x31, 0x80, 0x0a, 0xb2, 0x5e, 0x51, 0x0a, 0x14, 0x26, 0x99, 0xf3,
		0xeb, 0xf3, 0x88, 0xa8, 0xad, 0xb9, 0x47, 0xdc, 0xbe, 0x4f, 0xfa, 0x32, 0x4b, 0x3e, 0xf3, 0x05,
		0x2d, 0x89, 0xb6, 0xf7, 0xae, 0xf8, 0x15, 0x0d, 0xff, 0xe6, 0xcd, 0x59, 0x20, 0x5c, 0x41, 0xce,
		0x62, 0x1d, 0x3c, 0x82, 0x3d, 0xf9, 0x9a, 0xa7, 0xb6, 0xe2, 0xd1, 0xe5, 0x4d, 0x61, 0xd2, 0x5c,
		0xce, 0x16, 0x6a, 0xb2, 0xb6, 0x50, 0x47, 0x5b, 0x28, 0xa1, 0x2d, 0x14, 0x39, 0xd1, 0xa4, 0x61,
		0x97, 0x8f, 0x99, 0x20, 0x7e, 0x20, 0xbf, 0x80, 0x33, 0x21, 0x25, 0x3d, 0x25, 0x97, 0x41, 0x4e,
		0xb1, 0x94, 0x9d, 0x2d, 0x44, 0xd1, 0x74, 0x14, 0x0e, 0xaa, 0x78, 0xda, 0x0a, 0xa8, 0xad, 0x88,
		0x9a, 0x0a, 0x29, 0xa7, 0x98, 0x92, 0x0a, 0xaa, 0xac, 0xa8, 0x49, 0x07, 0xca, 0x6c, 0xde, 0x15,
		0x44, 0x04, 0xea, 0x2b, 0x3f, 0x93, 0xf6, 0x7c, 0x08, 0xc5, 0x85, 0x93, 0x8b, 0x13, 0xb4, 0x55,
		0x59, 0x47, 0xa5, 0x4d, 0xa8, 0xb6, 0xae, 0x8a, 0x1b, 0x53, 0x75, 0x63, 0x2a, 0x6f, 0x48, 0xf5,
		0xd5, 0x4c, 0x40, 0xd1, 0x14, 0xd4, 0xe3, 0x98, 0x22, 0xd7, 0xec, 0x34, 0x20, 0x42, 0x9f, 0x2a,
		0xf9, 0x05, 0xa0, 0xeb, 0x67, 0x97, 0x0d, 0xa2, 0x1b, 0x78, 0x00, 0x09, 0x07, 0xa6, 0x64, 0xf1,
		0xc4, 0x1f, 0x29, 0x03, 0x6b, 0x69, 0x32, 0xc8, 0x3f, 0xae, 0x37, 0x26, 0xea, 0x56, 0x9a, 0x19,
		0xe7, 0xd6, 0x77, 0xbb, 0x82, 0x72, 0x76, 0x43, 0x07, 0x34, 0x76, 0x53, 0xba, 0x03, 0xde, 0x91,
		0x81, 0x2b, 0xe8, 0x53, 0x74, 0x6f, 0x7d, 0xd7, 0x0b, 0x08, 0x78, 0xb4, 0xf0, 0x54, 0x63, 0x89,
		0xdd, 0x3f, 0xe6, 0x96, 0xb8, 0x76, 0xd1, 0x68, 0x38, 0xad, 0x46, 0xa3, 0xda, 0x3a, 0x6f, 0x55,
		0x2f, 0x9b, 0xcd, 0x9a, 0x53, 0x6b, 0x1e, 0xee, 0xaa, 0x1f, 0x6d, 0xa7, 0x57, 0xe7, 0x68, 0x33,
		0xe3, 0x2b, 0x68, 0x4d, 0x04, 0xad, 0xa3, 0x47, 0x4d, 0x6c, 0x8e, 0x07, 0x40, 0x64, 0x46, 0x64,
		0x46, 0x64, 0x46, 0x64, 0x46, 0x64, 0x46, 0x64, 0x46, 0x64, 0x36, 0x80, 0xcc, 0x7c, 0x2c, 0xb4,
		0x37, 0xce, 0x0b, 0x63, 0x20, 0x3e, 0x23, 0x3e, 0x23, 0x3e, 0x23, 0x3e, 0x23, 0x3e, 0x23, 0x3e,
		0x23, 0x3e, 0x1b, 0xc2, 0x67, 0xbd, 0xad, 0x73, 0x32, 0x02, 0x62, 0x33, 0x62, 0x33, 0x62, 0x33,
		0x62, 0x33, 0x62, 0x33, 0x62, 0x33, 0x62, 0xb3, 0x56, 0x4b, 0xd9, 0x34, 0xf6, 0x15, 0x63, 0x5c,
		0xb8, 0x91, 0xa4, 0xd4, 0xb2, 0xd9, 0x41, 0xf7, 0x17, 0x19, 0xba, 0xa3, 0x69, 0xc1, 0xd0, 0x19,
		0x1f, 0x11, 0x66, 0x0b, 0xdf, 0xed, 0xf7, 0x69, 0xd7, 0x1e, 0x10, 0x46, 0x7c, 0x57, 0x70, 0x3f,
		0xf6, 0xe7, 0x67, 0x71, 0x8d, 0x68, 0xfc, 0xdf, 0x69, 0x55, 0x91, 0x62, 0x01, 0xc6, 0x64, 0x3e,
		0xe1, 0x8f, 0xbb, 0x62, 0x5a, 0x41, 0x67, 0xdd, 0x7a, 0xfc, 0xf7, 0x8f, 0xeb, 0xd9, 0x30, 0x47,
		0x66, 0x96, 0x4d, 0x62, 0xc9, 0x2c, 0xca, 0xec, 0xbe, 0xef, 0x0e, 0x89, 0xed, 0xcb, 0x14, 0x30,
		0x65, 0x90, 0x20, 0xdd, 0x5d, 0xad, 0xfe, 0xa4, 0x8a, 0xf5, 0x27, 0x58, 0x7f, 0xa2, 0x11, 0x96,
		0xcc, 0x95, 0x90, 0x10, 0xd2, 0xf7, 0xb8, 0x2b, 0xce, 0xeb, 0x2a, 0x62, 0x9b, 0xaa, 0xe1, 0xa5,
		0x42, 0x97, 0x0f, 0x84, 0x0d, 0x62, 0x07, 0xa1, 0x16, 0x81, 0x00, 0x42, 0x2d, 0x9d, 0x88, 0x23,
		0x81, 0xc1, 0x06, 0x30, 0x8a, 0x35, 0x85, 0x75, 0xfa, 0x18, 0x07, 0x88, 0x28, 0xb4, 0x22, 0x89,
		0x43, 0x5a, 0xba, 0x0d, 0xc1, 0x75, 0x67, 0xbb, 0xe8, 0x04, 0xc6, 0x25, 0x44, 0x24, 0x44, 0x24,
		0x44, 0x24, 0x44, 0x24, 0x44, 0x24, 0x44, 0x24, 0x73, 0x88, 0xe4, 0xf1, 0x20, 0xb0, 0x47, 0x5d,
		0xa1, 0x0e, 0x49, 0x49, 0x4f, 0xc4, 0x24, 0xc4, 0x24, 0xc4, 0x24, 0xc4, 0x24, 0xc4, 0x24, 0xc4,
		0x24, 0x23, 0x98, 0x24, 0xf5, 0x1a, 0x6e, 0xc6, 0x1f, 0x48, 0xbc, 0x8e, 0x8b, 0x58, 0x84, 0x58,
		0xb4, 0x11, 0x2c, 0x0a, 0x84, 0x4f, 0xd9, 0x00, 0x00, 0x43, 0xb5, 0x8b, 0x2d, 0xda, 0x15, 0x1f,
		0x0b, 0xad, 0xc3, 0xf1, 0xa5, 0xfe, 0x68, 0x6b, 0x68, 0x6b, 0x18, 0xf7, 0x61, 0xdc, 0x87, 0x71,
		0x1f, 0xc6, 0x7d, 0xc6, 0xf0, 0x09, 0x8e, 0x4c, 0x88, 0x49, 0x88, 0x49, 0x88, 0x49, 0x88, 0x49,
		0x88, 0x49, 0x88, 0x49, 0xe6, 0x30, 0x49, 0xf8, 0x2e, 0x0b, 0x86, 0x14, 0x70, 0x3e, 0x9e, 0xf4,
		0x44, 0x4c, 0x42, 0x4c, 0xda, 0x01, 0x26, 0xfd, 0xe4, 0xdc, 0x23, 0x2e, 0x83, 0x1c, 0x4a, 0xd4,
		0x4c, 0x19, 0x98, 0x16, 0xd3, 0x94, 0x62, 0xe5, 0xa3, 0x4e, 0xc5, 0x23, 0x98, 0x42, 0x4d, 0x89,
		0x7f, 0xf0, 0x3d, 0x79, 0x2e, 0x38, 0xa8, 0xb4, 0x3e, 0xd0, 0x40, 0x5c, 0x09, 0x51, 0xc0, 0x53,
		0xf8, 0x91, 0xb2, 0xb7, 0x1e, 0x89, 0x54, 0xb4, 0xc0, 0xbf, 0x47, 0x48, 0xb4, 0xd0, 0x52, 0xad,
		0x8c, 0xd8, 0xfa, 0xe4, 0xf7, 0x88, 0x4f, 0x7a, 0xff, 0x8b, 0xee, 0x9a, 0x8d, 0x3d, 0x4f, 0xe9,
		0x61, 0x25, 0xa5, 0x07, 0x93, 0x9a, 0xb5, 0x96, 0xba, 0x6e, 0xb9, 0x10, 0x75, 0xb5, 0x74, 0x43,
		0x45, 0x3a, 0xd0, 0x82, 0x07, 0x52, 0x7e, 0x90, 0xf4, 0x5d, 0xcd, 0xe7, 0x5e, 0x98, 0xd7, 0xa2,
		0x4c, 0x10, 0xbf, 0xef, 0x76, 0xc9, 0x1a, 0x86, 0xd7, 0x85, 0x36, 0x5b, 0xa2, 0x79, 0xed, 0xd1,
		0xa0, 0x5b, 0x4e, 0x9a, 0xd7, 0xf8, 0xce, 0x4c, 0xd1, 0xbc, 0x26, 0x0b, 0x5b, 0xcc, 0xf5, 0x3a,
		0x6f, 0x5a, 0x12, 0xc2, 0xd7, 0x1c, 0x11, 0xa9, 0x82, 0xf3, 0x0e, 0x08, 0x5f, 0x57, 0x8b, 0x10,
		0xe6, 0x70, 0x0b, 0x09, 0x5f, 0xe9, 0xe8, 0xa9, 0x61, 0x33, 0x42, 0x07, 0xbf, 0x7e, 0x72, 0x09,
		0xa6, 0xc2, 0xb9, 0xbc, 0xd3, 0xfd, 0x0c, 0x13, 0x5f, 0x6e, 0x8a, 0x04, 0xb6, 0x40, 0x29, 0xa0,
		0x91, 0x5b, 0x09, 0x88, 0x2f, 0xd7, 0x2b, 0x8d, 0x99, 0x70, 0x44, 0x9a, 0xf8, 0x32, 0xa5, 0x1c,
		0x80, 0x52, 0xcf, 0x54, 0xf7, 0x03, 0xa1, 0xc0, 0x94, 0x54, 0xbd, 0x03, 0xdc, 0x3c, 0xc8, 0xa9,
		0xe6, 0x66, 0x36, 0x0f, 0xea, 0x14, 0x98, 0x91, 0xee, 0xb9, 0xbd, 0x9e, 0x4f, 0x02, 0x1d, 0xa6,
		0xad, 0xc5, 0x51, 0xfe, 0x92, 0x57, 0x86, 0x15, 0x15, 0x5c, 0x57, 0xd1, 0x8d, 0x29, 0xbc, 0x31,
		0xc5, 0x37, 0x64, 0x00, 0xc0, 0xb3, 0xa3, 0xad, 0xbf, 0x32, 0x2c, 0x4f, 0xf0, 0x9d, 0xeb, 0xab,
		0x5b, 0x80, 0xbe, 0x19, 0x02, 0xf0, 0x94, 0xad, 0x95, 0x80, 0x6c, 0x40, 0x8e, 0x38, 0x3c, 0x77,
		0x59, 0x65, 0x88, 0xc4, 0x35, 0xc1, 0x0f, 0x7d, 0x06, 0xfa, 0x0c, 0x88, 0xcf, 0x50, 0x05, 0x53,
		0x33, 0xa0, 0x6a, 0x12, 0x5c, 0x35, 0x41, 0x56, 0xdb, 0x70, 0x4c, 0x18, 0x90, 0x49, 0x43, 0x32,
		0x65, 0x50, 0xc6, 0x0d, 0xcb, 0xb8, 0x81, 0x19, 0x36, 0x34, 0x98, 0xc1, 0x01, 0x0d, 0x4f, 0x1f,
		0xb4, 0x37, 0x61, 0x43, 0x29, 0xe0, 0xb9, 0xd0, 0x18, 0xe3, 0xde, 0x15, 0x82, 0xf8, 0x0c, 0xcc,
		0x02, 0x92, 0x0c, 0x74, 0xfc, 0x50, 0xb5, 0x2f, 0x3b, 0xaf, 0x0f, 0x35, 0xfb, 0xb2, 0x33, 0xf9,
		0x67, 0x2d, 0xfe, 0xdf, 0x4b, 0x3d, 0x7c, 0xad, 0x3f, 0x54, 0xed, 0xc6, 0xf4, 0x6a, 0xbd, 0xf9,
		0x50, 0xb5, 0x9b, 0x9d, 0x93, 0xe3, 0xef, 0xdf, 0xdf, 0xa8, 0xf6, 0x39, 0x79, 0x39, 0x0f, 0xe1,
		0xea, 0xd2, 0xd9, 0x12, 0xb1, 0x03, 0x24, 0x65, 0xeb, 0x51, 0xf6, 0x68, 0x7b, 0xee, 0x33, 0xf1,
		0xcd, 0xb9, 0xea, 0x15, 0x63, 0xa2, 0xc3, 0x46, 0x87, 0x8d, 0x0e, 0x5b, 0x59, 0x67, 0x86, 0x6e,
		0xf7, 0xe0, 0xfc, 0x75, 0xe4, 0x59, 0x5d, 0xbb, 0x7f, 0x65, 0xdf, 0x46, 0xee, 0xf6, 0xb8, 0x9d,
		0xfe, 0xfb, 0xe4, 0xa5, 0xb9, 0x0f, 0x9e, 0x76, 0xa3, 0x11, 0x37, 0x90, 0xfa, 0x66, 0xbe, 0x17,
		0x95, 0xca, 0xc8, 0x45, 0x16, 0xc5, 0x9f, 0x88, 0xff, 0x7c, 0x36, 0xcf, 0xa4, 0xcd, 0xff, 0x79,
		0x96, 0x3e, 0xea, 0x4f, 0xff, 0x29, 0x93, 0x3c, 0xd6, 0xd8, 0x76, 0x1b, 0x3d, 0x0b, 0x9c, 0x26,
		0x9f, 0x01, 0xa1, 0x8f, 0x5c, 0x52, 0x3a, 0xd3, 0x4b, 0x3a, 0x49, 0x9d, 0xed, 0xa9, 0x91, 0xb4,
		0xce, 0x0c, 0x26, 0x95, 0xc4, 0x86, 0x2e, 0xea, 0x66, 0xc9, 0x99, 0x34, 0x34, 0x13, 0xce, 0xdc,
		0xf4, 0x6e, 0x36, 0xfe, 0x8f, 0x77, 0xa3, 0xa7, 0xc6, 0xdd, 0x6c, 0xbc, 0x03, 0xae, 0x08, 0x51,
		0x5a, 0xe6, 0x4d, 0x7c, 0x6c, 0x8f, 0x8e, 0x9e, 0x1c, 0x60, 0x16, 0xd2, 0xc1, 0x2c, 0xa4, 0x6e,
		0x2c, 0x77, 0xb8, 0x59, 0x48, 0x47, 0x2f, 0x0b, 0xe9, 0x60, 0x16, 0x12, 0xb3, 0x90, 0x06, 0x40,
		0x12, 0x92, 0x85, 0x74, 0x8c, 0x64, 0x21, 0x1d, 0xcc, 0x42, 0x6e, 0x65, 0x3f, 0x8d, 0x19, 0x05,
		0xd0, 0xfe, 0xe6, 0xa0, 0xb2, 0x90, 0x0e, 0x66, 0x21, 0x31, 0x0b, 0x89, 0x3e, 0xa3, 0xcc, 0x59,
		0x48, 0xc7, 0x68, 0x16, 0xd2, 0xc1, 0x43, 0x6d, 0x3c, 0xd4, 0xc6, 0x43, 0xed, 0x9d, 0xda, 0x50,
		0xf9, 0x4e, 0xb5, 0x8f, 0x8f, 0x17, 0xcf, 0xb1, 0x6b, 0xa7, 0x8d, 0xb0, 0x7d, 0xf2, 0xd2, 0x0a,
		0x97, 0x2f, 0xbe, 0xae, 0x6a, 0x56, 0x3b, 0x6d, 0x85, 0xed, 0x9c, 0x5f, 0x9c, 0xb0, 0x2d, 0x39,
		0x46, 0x73, 0xe9, 0x2c, 0x3d, 0xfa, 0x21, 0xba, 0x5e, 0xcf, 0xeb, 0xd0, 0xc8, 0xe9, 0x70, 0x9e,
		0xd7, 0xe1, 0x3c, 0xa7, 0x43, 0xee, 0x2d, 0xd5, 0x73, 0x3a, 0x34, 0xc3, 0xd7, 0x4c, 0xfb, 0xe3,
		0xd5, 0x4d, 0x9d, 0xf0, 0xe4, 0x35, 0xef, 0xb7, 0x56, 0xf8, 0xda, 0x3e, 0x39, 0xc1, 0xbc, 0xac,
		0x74, 0xd4, 0x8c, 0x79, 0x59, 0x84, 0x30, 0x84, 0x30, 0xcc, 0xcb, 0xae, 0x1c, 0x08, 0xf3, 0xb2,
		0x85, 0xba, 0x5f, 0x92, 0xbc, 0xac, 0x93, 0xce, 0x7e, 0x39, 0x7b, 0x9e, 0x97, 0x75, 0x30, 0x2f,
		0x6b, 0x6a, 0x51, 0x77, 0x9d, 0x97, 0xcd, 0xd5, 0x4c, 0x43, 0x79, 0x59, 0x07, 0xf3, 0xb2, 0x4b,
		0xcb, 0xbc, 0x89, 0xbc, 0xac, 0x14, 0x0f, 0xa9, 0x0a, 0xff, 0xa8, 0x64, 0xbc, 0x88, 0x39, 0xd8,
		0x72, 0xe7, 0x60, 0xa5, 0xe3, 0x27, 0xc0, 0x39, 0xbd, 0xca, 0xb9, 0x7c, 0xf6, 0x1c, 0x3e, 0xd6,
		0xc1, 0x0d, 0x58, 0x82, 0xdc, 0x79, 0xba, 0xd2, 0xf9, 0x39, 0xd6, 0x23, 0x1c, 0x84, 0x2d, 0x48,
		0xd7, 0x23, 0x20, 0xa9, 0x33, 0x56, 0x1f, 0xec, 0x22, 0xbe, 0xde, 0x6b, 0x52, 0xe7, 0xfd, 0x8b,
		0xca, 0x90, 0x4e, 0x49, 0x6f, 0xc7, 0xb3, 0x1d, 0x3a, 0xa5, 0xf5, 0x42, 0x94, 0x67, 0x57, 0x4a,
		0x36, 0x25, 0x65, 0xa2, 0x58, 0x5a, 0xf5, 0x70, 0x32, 0x64, 0x4b, 0x23, 0xee, 0x8b, 0x35, 0x3c,
		0x4b, 0x93, 0x9f, 0xb7, 0x44, 0xb1, 0x14, 0x4d, 0x56, 0x4e, 0x8a, 0xa5, 0xf8, 0xce, 0x4c, 0x51,
		0x2c, 0xc5, 0x83, 0x15, 0xb2, 0x2b, 0xe5, 0x2c, 0x46, 0x65, 0x17, 0xc4, 0x4a, 0x6b, 0xee, 0xa5,
		0x52, 0x6e, 0x62, 0xa5, 0xd5, 0x82, 0x83, 0xb9, 0xde, 0x42, 0x62, 0xa5, 0xc3, 0xdd, 0x3a, 0x17,
		0x28, 0xc0, 0x1e, 0x6f, 0x17, 0xd6, 0x2b, 0x08, 0x6e, 0x9d, 0x71, 0xeb, 0x8c, 0xb6, 0xb0, 0x93,
		0xad, 0x73, 0xf2, 0x39, 0x76, 0xe5, 0xed, 0xb3, 0xe2, 0x87, 0xdc, 0x4b, 0x5f, 0xc0, 0x2f, 0xa9,
		0x70, 0x07, 0xb8, 0x85, 0x96, 0x53, 0xc8, 0xcd, 0x6c, 0xa1, 0xd5, 0x0b, 0xf8, 0xa7, 0x5f, 0xd1,
		0xd7, 0xa9, 0xde, 0x4f, 0x86, 0xf8, 0x4b, 0x4a, 0xf7, 0x15, 0x55, 0x5b, 0x57, 0xc5, 0x8d, 0xa9,
		0xba, 0x31, 0x95, 0x37, 0xa4, 0xfa, 0x6a, 0x26, 0xa0, 0x68, 0x0a, 0xf0, 0x53, 0xa5, 0x3c, 0xd7,
		0xec, 0x34, 0x34, 0x8a, 0xf7, 0x01, 0xf5, 0x12, 0xd6, 0x67, 0x97, 0x0d, 0x08, 0xb8, 0x4a, 0x42,
		0xa3, 0x66, 0x44, 0xe7, 0x7b, 0x12, 0xc9, 0x20, 0xb3, 0x8f, 0x23, 0x54, 0x35, 0xcb, 0x77, 0x4c,
		0x7d, 0x24, 0x61, 0x2e, 0x56, 0xdd, 0x8f, 0x25, 0x00, 0x35, 0x71, 0xf9, 0x78, 0xca, 0xdc, 0x12,
		0xeb, 0xe5, 0xf7, 0xf7, 0x6d, 0xd5, 0xb7, 0x54, 0x98, 0xd3, 0x29, 0xc1, 0xcb, 0x31, 0x94, 0xd9,
		0xbc, 0x2b, 0x88, 0xd0, 0x43, 0xe7, 0xe9, 0x10, 0x88, 0xce, 0x88, 0xce, 0x88, 0xce, 0x88, 0xce,
		0x88, 0xce, 0x88, 0xce, 0x88, 0xce, 0x06, 0xd0, 0x39, 0xf9, 0xc8, 0xae, 0x06, 0x3c, 0x2f, 0x8c,
		0x81, 0xf8, 0x8c, 0xf8, 0x8c, 0xf8, 0x8c, 0xf8, 0x8c, 0xf8, 0x8c, 0xf8, 0x8c, 0xf8, 0x6c, 0x08,
		0x9f, 0x75, 0xb7, 0xcf, 0x0b, 0x63, 0x20, 0x3e, 0x23, 0x3e, 0x23, 0x3e, 0x23, 0x3e, 0x23, 0x3e,
		0x23, 0x3e, 0x23, 0x3e, 0x6b, 0xb5, 0x2c, 0xc7, 0xcb, 0x81, 0x91, 0x3f, 0x3f, 0x8b, 0x6b, 0x45,
		0xe3, 0xff, 0x4e, 0xab, 0x8b, 0x14, 0x0b, 0x31, 0x2a, 0xd9, 0x52, 0xdb, 0x7b, 0xee, 0x8b, 0x1f,
		0xd7, 0xb3, 0x61, 0xb6, 0xf8, 0x05, 0x6c, 0xca, 0x6c, 0x5f, 0x85, 0x4d, 0x6b, 0x31, 0x49, 0xe0,
		0xcb, 0xf3, 0x68, 0x95, 0xfe, 0xf5, 0x0d, 0xac, 0x3d, 0xd9, 0x85, 0xb1, 0xc2, 0x5f, 0xdf, 0xa0,
		0x84, 0x90, 0xbe, 0xc7, 0x5d, 0x71, 0x5e, 0x07, 0xbc, 0xc3, 0x71, 0xa9, 0xd0, 0xe5, 0x03, 0x61,
		0x83, 0xd8, 0x29, 0xa8, 0x45, 0x1d, 0x80, 0xf0, 0x4a, 0x27, 0xca, 0x48, 0xa0, 0xaf, 0x01, 0x8c,
		0x5c, 0x4d, 0xe1, 0x9b, 0x3e, 0xae, 0x41, 0x88, 0x64, 0x74, 0xa2, 0x87, 0x43, 0x5a, 0xba, 0x0d,
		0x41, 0x74, 0x67, 0x8b, 0x88, 0xe4, 0x51, 0xf6, 0xa8, 0x0e, 0x47, 0x71, 0x2f, 0xc4, 0x22, 0xc4,
		0xa2, 0x1d, 0x60, 0x11, 0x61, 0xe3, 0x61, 0x14, 0x1f, 0x46, 0x31, 0x27, 0xe0, 0x7d, 0x42, 0x05,
		0xb7, 0x63, 0xbd, 0x65, 0xe3, 0xa1, 0xba, 0xa0, 0xbf, 0xf2, 0x2f, 0x93, 0xb7, 0x1d, 0x41, 0xbb,
		0xfe, 0x6a, 0xf4, 0x8c, 0xdf, 0xee, 0x21, 0x7b, 0xfd, 0x5a, 0xd4, 0xf5, 0xe6, 0xd3, 0xbf, 0x77,
		0xd6, 0x66, 0x4f, 0x34, 0xf8, 0x3b, 0x26, 0x60, 0x0f, 0x17, 0xdf, 0x9c, 0x32, 0xaf, 0x6b, 0xdc,
		0xf5, 0xdb, 0x7d, 0xe4, 0x13, 0x76, 0xbb, 0x29, 0x32, 0xe2, 0x71, 0xf1, 0xe5, 0x6d, 0xf4, 0xb8,
		0xfb, 0xe5, 0x71, 0x4b, 0xf0, 0xf2, 0xb6, 0x84, 0x5d, 0xf1, 0xb1, 0x00, 0x6e, 0xae, 0x93, 0x9e,
		0x68, 0x5f, 0x68, 0x5f, 0xb8, 0xbb, 0xc6, 0xdd, 0x35, 0xee, 0xae, 0x71, 0x77, 0xbd, 0x97, 0x84,
		0x22, 0x2b, 0x0f, 0xcc, 0x91, 0x41, 0x64, 0x55, 0xe7, 0x12, 0x31, 0x88, 0x2c, 0x49, 0x4d, 0x9e,
		0x32, 0xe4, 0x3e, 0x17, 0xee, 0x76, 0xc3, 0x16, 0x32, 0x7f, 0x90, 0x5c, 0x8e, 0x90, 0xa3, 0x85,
		0xd9, 0xf3, 0x66, 0xb5, 0x68, 0x70, 0xcd, 0x87, 0x23, 0x9f, 0x04, 0x01, 0xe9, 0x7d, 0x89, 0x67,
		0xce, 0x84, 0x07, 0x16, 0x0d, 0x6e, 0xdd, 0x47, 0xf2, 0x99, 0xf3, 0x6c, 0xe8, 0xb0, 0x7c, 0xb7,
		0xd6, 0xe2, 0x4f, 0xa9, 0x05, 0xbc, 0x21, 0x4f, 0x74, 0x46, 0xb8, 0x12, 0x1e, 0x85, 0xff, 0x01,
		0x00, 0x00, 0xff, 0xff, 0x01, 0x00, 0x00, 0xff, 0xff, 0xa0, 0x59, 0xc1, 0xa4, 0x4e, 0xe4, 0x00,
		0x00,
	}
)

// ΛEnumTypes is a map, keyed by a YANG schema path, of the enumerated types that
// correspond with the leaf. The type is represented as a reflect.Type. The naming
// of the map ensures that there are no clashes with valid YANG identifiers.
func initΛEnumTypes() {
	ΛEnumTypes = map[string][]reflect.Type{
		"/ports/port/state/link": {
			reflect.TypeOf((E_Port_Link)(0)),
		},
	}
}
